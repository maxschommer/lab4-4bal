from generateCode import *


instances = 32
fname = "regfile.v"

input1Fmt = ".input{0} (genblock[{0}].regOut)"

repeatedInput  = repeatNTimes(input1Fmt, instances, delim=", ", end="")
# repeatedMux = repeatNTimes(muxFmt, instances, delim="\n")


baseStr = """
//------------------------------------------------------------------------------
// MIPS register file
//   width: 32 bits
//   depth: 32 words (reg[0] is static zero register)
//   2 asynchronous read ports
//   1 synchronous, positive edge triggered write port
//------------------------------------------------------------------------------
`include "decoder1to32.v"
`include "register32.v"
`include "register32zero.v"
`include "mux32to1by32.v"

module regfile
(
output[31:0]	ReadData1,	// Contents of first register read
output[31:0]	ReadData2,	// Contents of second register read
input[31:0]	WriteData,	// Contents to write to register
input[4:0]	ReadRegister1,	// Address of first register to read
input[4:0]	ReadRegister2,	// Address of second register to read
input[4:0]	WriteRegister,	// Address of register to write
input		RegWrite,	// Enable writing of register when High
input		Clk		// Clock (Positive Edge Triggered)
);
	localparam WIDTH = 32;

	
	
	wire [WIDTH-1:0] decoded;
	decoder1to32 dec(.out(decoded), .enable (RegWrite), .address(WriteRegister));

    genvar i;
    generate
        for (i=0; i<WIDTH; i=i+1)
        begin:genblock
        	wire [WIDTH-1:0] regOut;
        	if (i == 0) 
    	    	register32zero regs(.q(regOut), .d(WriteData), .wrenable(decoded[i]), .clk(Clk));
        	else
    	    	register32 regs(.q(regOut), .d(WriteData), .wrenable(decoded[i]), .clk(Clk));
        end
    endgenerate

    mux32to1by32 endMux1(.out(ReadData1), .address(ReadRegister1), {0});
 	mux32to1by32 endMux2(.out(ReadData2), .address(ReadRegister2), {0});


endmodule
""".format(repeatedInput)



genWarning = """// WARNING: THIS FILE WAS GENERATED. DO NOT MODIFY\n"""

# print(baseStr)
saveToFile(fname, genWarning + baseStr)